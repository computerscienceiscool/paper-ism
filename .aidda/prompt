move toc to after abstract

Sysmsg: 
        You are an expert technical writer proficient in asciidoc. You
        will use proper asciidoc headings, code blocks, and other
        syntax to format your response.  You will use active,
        not passive voice.  You will be specific in content and
        meaning, and refrain from padding paragraphs with vague 
        marketing-style fluff.  Your audience is engineers.
In: 
  README.adoc
Out: 
  README.adoc

.stop


- sender sends a non-blocking message that says "i will give you X if
  you attach hyperedge Y to nodes X", but it says that with some of
  the hyperedge endpoints as they touch the accounts 
- receiver either ignores it or attaches the edge
- sender monitors or polls the node, sees the edge show up
- nodes have capability-based permissions
- double-spend isn't proactively prevented but might later prevent
  merge if merge would cause bidder's balance to drop below zero
  - similar in concept to git taking a nonlocking, merge-later
    approach rather than proactively locking to prevent edits of the
    same file in earlier VCS e.g. CVS and SVN
- a node is a graph is a hyperedge is a message is an intent is a
  (something that is a fundamental building block of the universe),
  which means the message really is "here's an intent that I'm
  attaching to the graph at these points, please build on it"
- receiver is incentivized to build something of quality on the intent
  because if they do they get the points if someone else builds on
  their work
- i.e. every message is a commit is a PR, and valid questions are "why
  would anyone want to add a commit/PR, and why would anyone want to
  accept it?
- get away from the github bottleneck of PR red tape -- every message
  is a commit is a PR and can be built on by anyone else 
- get primary maintainer out of the bottleneck of having to do all the
  merges
- agents "vote" by building on others' work
- kernel (host) is an agent, is paid as part of the hyperedge

- use 3d printer multidimensional plane example 
- find out what mark uses instead of "infinite state machine"
- in Practical Applications, show an llm chat example first (get rid
  of the existing ML example)
  - this is more intuitive
  - LLMs have made (f1, in, out, f2) more obvious because it can be
    restated as (context, prompt, answer, new_context)

- from "multiagent tool, git storage":
  - tuple is (g, context, prompt, g', new_context, new_prompts), where g' might be a new behavior of g (g might be learning, responding to context and prompt, producing g').  any element might be a hash (pointer or merkle root)
  - interesting that it's like there is a layered thing going on -- message layer controlling changes in context layer
  - branch-level prompts (sysmsgs) might be in earlier commit messages

- git graphs drawn wrong

- rube goldberg example of inanimate agents

- "why it matters" subsection in discussion

- cite RFC's about centralization concerns

- social media trust metrics should not be absolute -- trust is in the
  eye of the beholder
  
- https://compcogneuro.org/book -- neuron is an agent, neuron can be expresses as a state table or state machine

XXX ensure forward references

- JJ: need examples of joint ownership
  - IETF/RFCs enable decentralized internet

- possible title ref Rebecca: decentralized AI beyond crypt

- JJ/Anthropic: 
  - promise theory in practice: applications in modern software architecture

- Steve: infinite promises: XXX

- discussion should mention central giving way to decen

- agents can't imspect themselves

- hyperedges can have multiple inputs and multiple outputs
  - group events
  - quantum entanglement?

- https://arxiv.org/pdf/1906.10726 refers to causual relationships
  between hilbert states

.stop

- maybe use 0xRRGGBB for node color to represent more than two state
  dimanesions
- consider video or animations to show time dimension

Sysmsg: You are an expert OpenSCAD user and developer.

.stop


